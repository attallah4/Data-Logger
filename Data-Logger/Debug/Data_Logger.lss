
Data_Logger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001056  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00001056  000010ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008000b6  008000b6  00001140  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001170  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000325b  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001045  00000000  00000000  0000485f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b15  00000000  00000000  000058a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd4  00000000  00000000  000073bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000117d  00000000  00000000  00007f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000231f  00000000  00000000  0000910d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000390  00000000  00000000  0000b42c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__vector_1>
       8:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__vector_2>
       c:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5e 07 	jmp	0xebc	; 0xebc <__vector_6>
      1c:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__vector_7>
      20:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__vector_8>
      24:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__vector_9>
      28:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__vector_10>
      2c:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__vector_11>
      30:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__vector_12>
      34:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_15>
      40:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 03 	call	0x6c4	; 0x6c4 <main>
      8a:	0c 94 29 08 	jmp	0x1052	; 0x1052 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <set_ldr>:
	}
}

void set_ldr(void)
{
	DIO_WritePin(PINC7,HIGH);
      92:	61 e0       	ldi	r22, 0x01	; 1
      94:	87 e1       	ldi	r24, 0x17	; 23
      96:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
      9a:	08 95       	ret

0000009c <set_temp>:
}

void set_temp(void)
{
	DIO_WritePin(PINC6,HIGH);
      9c:	61 e0       	ldi	r22, 0x01	; 1
      9e:	86 e1       	ldi	r24, 0x16	; 22
      a0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
      a4:	08 95       	ret

000000a6 <adc_read_chain>:



void adc_read_chain(void)
{
	if (flag_adc_ldr==0)
      a6:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <flag_adc_ldr>
      aa:	81 11       	cpse	r24, r1
      ac:	10 c0       	rjmp	.+32     	; 0xce <adc_read_chain+0x28>
	{
		ADC_READ_ldr=ADC_16ReadADC();
      ae:	0e 94 a3 03 	call	0x746	; 0x746 <ADC_16ReadADC>
      b2:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <ADC_READ_ldr+0x1>
      b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <ADC_READ_ldr>
		flag_adc_ldr=1;
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <flag_adc_ldr>
		channel=TEMP_CH;
      c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <channel>
		ADC_voidStartConversion(channel);
      c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <channel>
      c8:	0e 94 6f 03 	call	0x6de	; 0x6de <ADC_voidStartConversion>
      cc:	08 95       	ret
	}
	else if (flag_adc_lm35==0)
      ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      d2:	81 11       	cpse	r24, r1
      d4:	0f c0       	rjmp	.+30     	; 0xf4 <adc_read_chain+0x4e>
	{
		TEMP_READ=Temp_Read();
      d6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <Temp_Read>
      da:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <__data_end+0x1>
      de:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__data_end>
		flag_adc_lm35=1;
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		channel=LDR_CH;
      e8:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <channel>
		ADC_voidStartConversion(channel);
      ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <channel>
      f0:	0e 94 6f 03 	call	0x6de	; 0x6de <ADC_voidStartConversion>
      f4:	08 95       	ret

000000f6 <Data_Logger_Init>:
volatile u16 TEMP_READ=0;


void Data_Logger_Init(void)
{
	DIO_Init();
      f6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <DIO_Init>
	LCD_Init();
      fa:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_Init>
	//KEYPAD_Init();
	ADC_SetCallback(adc_read_chain);
      fe:	83 e5       	ldi	r24, 0x53	; 83
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 a6 03 	call	0x74c	; 0x74c <ADC_SetCallback>
	GIE_voidEnable();
     106:	78 94       	sei
	EXI_SetCallBack(EX_INT0,set_ldr);
     108:	69 e4       	ldi	r22, 0x49	; 73
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <EXI_SetCallBack>
	EXI_SetCallBack(EX_INT1,set_temp);
     112:	6e e4       	ldi	r22, 0x4E	; 78
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <EXI_SetCallBack>
	EXI_TriggerEdge(EX_INT0,RISING_EDGE);
     11c:	63 e0       	ldi	r22, 0x03	; 3
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	0e 94 79 05 	call	0xaf2	; 0xaf2 <EXI_TriggerEdge>
	EXI_Enable(EX_INT0);
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	0e 94 67 05 	call	0xace	; 0xace <EXI_Enable>
	EXI_TriggerEdge(EX_INT1,RISING_EDGE);
     12a:	63 e0       	ldi	r22, 0x03	; 3
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <EXI_TriggerEdge>
	EXI_Enable(EX_INT1);
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	0e 94 67 05 	call	0xace	; 0xace <EXI_Enable>
	
	ADC_Init(VREF_AVCC,ADC_SCALER_128);
     138:	67 e0       	ldi	r22, 0x07	; 7
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <ADC_Init>
	ADC_Chain(LDR_CH);
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	0e 94 ab 03 	call	0x756	; 0x756 <ADC_Chain>
     146:	08 95       	ret

00000148 <LDR_LED>:
	}
}

void LDR_LED(void)
{
	if(ADC_READ_ldr<1023&&ADC_READ_ldr>768)
     148:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <ADC_READ_ldr>
     14c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <ADC_READ_ldr+0x1>
     150:	8f 3f       	cpi	r24, 0xFF	; 255
     152:	93 40       	sbci	r25, 0x03	; 3
     154:	c0 f4       	brcc	.+48     	; 0x186 <LDR_LED+0x3e>
     156:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <ADC_READ_ldr>
     15a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <ADC_READ_ldr+0x1>
     15e:	81 30       	cpi	r24, 0x01	; 1
     160:	93 40       	sbci	r25, 0x03	; 3
     162:	88 f0       	brcs	.+34     	; 0x186 <LDR_LED+0x3e>
	{
		DIO_WritePin(PINB7,HIGH);
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	8f e0       	ldi	r24, 0x0F	; 15
     168:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		DIO_WritePin(PINA4,LOW);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	84 e0       	ldi	r24, 0x04	; 4
     170:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		DIO_WritePin(PINA5,LOW);
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	85 e0       	ldi	r24, 0x05	; 5
     178:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		DIO_WritePin(PINA6,LOW);
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	86 e0       	ldi	r24, 0x06	; 6
     180:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     184:	08 95       	ret
	}
	else if(ADC_READ_ldr<768&&ADC_READ_ldr>512)
     186:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <ADC_READ_ldr>
     18a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <ADC_READ_ldr+0x1>
     18e:	81 15       	cp	r24, r1
     190:	93 40       	sbci	r25, 0x03	; 3
     192:	c0 f4       	brcc	.+48     	; 0x1c4 <LDR_LED+0x7c>
     194:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <ADC_READ_ldr>
     198:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <ADC_READ_ldr+0x1>
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	92 40       	sbci	r25, 0x02	; 2
     1a0:	88 f0       	brcs	.+34     	; 0x1c4 <LDR_LED+0x7c>
	{
		DIO_WritePin(PINB7,LOW);
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	8f e0       	ldi	r24, 0x0F	; 15
     1a6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		DIO_WritePin(PINA4,HIGH);
     1aa:	61 e0       	ldi	r22, 0x01	; 1
     1ac:	84 e0       	ldi	r24, 0x04	; 4
     1ae:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		DIO_WritePin(PINA5,LOW);
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	85 e0       	ldi	r24, 0x05	; 5
     1b6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		DIO_WritePin(PINA6,LOW);
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	86 e0       	ldi	r24, 0x06	; 6
     1be:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     1c2:	08 95       	ret
	}
	else if(ADC_READ_ldr<512&&ADC_READ_ldr>256)
     1c4:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <ADC_READ_ldr>
     1c8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <ADC_READ_ldr+0x1>
     1cc:	81 15       	cp	r24, r1
     1ce:	92 40       	sbci	r25, 0x02	; 2
     1d0:	c0 f4       	brcc	.+48     	; 0x202 <LDR_LED+0xba>
     1d2:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <ADC_READ_ldr>
     1d6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <ADC_READ_ldr+0x1>
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	91 40       	sbci	r25, 0x01	; 1
     1de:	88 f0       	brcs	.+34     	; 0x202 <LDR_LED+0xba>
	{
		DIO_WritePin(PINB7,LOW);
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	8f e0       	ldi	r24, 0x0F	; 15
     1e4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		DIO_WritePin(PINA4,LOW);
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	84 e0       	ldi	r24, 0x04	; 4
     1ec:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		DIO_WritePin(PINA5,HIGH);
     1f0:	61 e0       	ldi	r22, 0x01	; 1
     1f2:	85 e0       	ldi	r24, 0x05	; 5
     1f4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		DIO_WritePin(PINA6,LOW);
     1f8:	60 e0       	ldi	r22, 0x00	; 0
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     200:	08 95       	ret
	}
	else if(ADC_READ_ldr>0)
     202:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <ADC_READ_ldr>
     206:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <ADC_READ_ldr+0x1>
     20a:	89 2b       	or	r24, r25
     20c:	81 f0       	breq	.+32     	; 0x22e <LDR_LED+0xe6>
	{
		DIO_WritePin(PINB7,LOW);
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	8f e0       	ldi	r24, 0x0F	; 15
     212:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		DIO_WritePin(PINA4,LOW);
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	84 e0       	ldi	r24, 0x04	; 4
     21a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		DIO_WritePin(PINA5,LOW);
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	85 e0       	ldi	r24, 0x05	; 5
     222:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		DIO_WritePin(PINA6,HIGH);
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	86 e0       	ldi	r24, 0x06	; 6
     22a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     22e:	08 95       	ret

00000230 <Data_Logger_Runnable>:



void Data_Logger_Runnable(void)
{
	DIO_WritePin(PINC6,LOW);
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	86 e1       	ldi	r24, 0x16	; 22
     234:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(PINC7,LOW);
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	87 e1       	ldi	r24, 0x17	; 23
     23c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	LCD_GoTo(3,0);
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	83 e0       	ldi	r24, 0x03	; 3
     244:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_GoTo>
	LCD_WriteString("EX_INT Source:");
     248:	81 e6       	ldi	r24, 0x61	; 97
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_WriteString>
	LCD_WriteString("           ");
     250:	89 e8       	ldi	r24, 0x89	; 137
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_WriteString>
	LCD_GoTo(4,15);
     258:	6f e0       	ldi	r22, 0x0F	; 15
     25a:	84 e0       	ldi	r24, 0x04	; 4
     25c:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_GoTo>
	LCD_WriteString("           ");
     260:	89 e8       	ldi	r24, 0x89	; 137
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_WriteString>
	if ((TEMP_READ/10)>25)
     268:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end>
     26c:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x1>
     270:	84 30       	cpi	r24, 0x04	; 4
     272:	91 40       	sbci	r25, 0x01	; 1
     274:	b0 f0       	brcs	.+44     	; 0x2a2 <Data_Logger_Runnable+0x72>
	{
		DIO_WritePin(PIND2,HIGH);
     276:	61 e0       	ldi	r22, 0x01	; 1
     278:	8a e1       	ldi	r24, 0x1A	; 26
     27a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     27e:	8f e9       	ldi	r24, 0x9F	; 159
     280:	9f e0       	ldi	r25, 0x0F	; 15
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <Data_Logger_Runnable+0x52>
     286:	00 c0       	rjmp	.+0      	; 0x288 <Data_Logger_Runnable+0x58>
     288:	00 00       	nop
		_delay_ms(1);
		DIO_WritePin(PIND2,LOW);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	8a e1       	ldi	r24, 0x1A	; 26
     28e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		LCD_GoTo(4,15);
     292:	6f e0       	ldi	r22, 0x0F	; 15
     294:	84 e0       	ldi	r24, 0x04	; 4
     296:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_GoTo>
		LCD_WriteString("TEMP");
     29a:	80 e7       	ldi	r24, 0x70	; 112
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_WriteString>
		
	}
	if ((ADC_READ_ldr)>400)
     2a2:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <ADC_READ_ldr>
     2a6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <ADC_READ_ldr+0x1>
     2aa:	81 39       	cpi	r24, 0x91	; 145
     2ac:	91 40       	sbci	r25, 0x01	; 1
     2ae:	b0 f0       	brcs	.+44     	; 0x2dc <Data_Logger_Runnable+0xac>
	{
		DIO_WritePin(PIND3,HIGH);
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	8b e1       	ldi	r24, 0x1B	; 27
     2b4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     2b8:	8f e9       	ldi	r24, 0x9F	; 159
     2ba:	9f e0       	ldi	r25, 0x0F	; 15
     2bc:	01 97       	sbiw	r24, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <Data_Logger_Runnable+0x8c>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <Data_Logger_Runnable+0x92>
     2c2:	00 00       	nop
		_delay_ms(1);
		DIO_WritePin(PIND3,LOW);
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	8b e1       	ldi	r24, 0x1B	; 27
     2c8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
		LCD_GoTo(3,15);
     2cc:	6f e0       	ldi	r22, 0x0F	; 15
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_GoTo>
		LCD_WriteString("LDR");
     2d4:	85 e7       	ldi	r24, 0x75	; 117
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_WriteString>
	}
	
	if (flag_adc_lm35)
     2dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2e0:	88 23       	and	r24, r24
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <Data_Logger_Runnable+0xb6>
     2e4:	53 c0       	rjmp	.+166    	; 0x38c <Data_Logger_Runnable+0x15c>
	{
		
		
		LCD_GoTo(1,0);
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_GoTo>
		LCD_WriteString("Temp:");
     2ee:	89 e7       	ldi	r24, 0x79	; 121
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_WriteString>
		LCD_GoTo(1,5);
     2f6:	65 e0       	ldi	r22, 0x05	; 5
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_GoTo>
		LCD_WriteString("      ");
     2fe:	8e e8       	ldi	r24, 0x8E	; 142
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_WriteString>
		LCD_GoTo(1,5);
     306:	65 e0       	ldi	r22, 0x05	; 5
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_GoTo>
		LCD_WriteNumber(TEMP_READ/10);
     30e:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <__data_end>
     312:	30 91 b7 00 	lds	r19, 0x00B7	; 0x8000b7 <__data_end+0x1>
     316:	ad ec       	ldi	r26, 0xCD	; 205
     318:	bc ec       	ldi	r27, 0xCC	; 204
     31a:	0e 94 1a 08 	call	0x1034	; 0x1034 <__umulhisi3>
     31e:	96 95       	lsr	r25
     320:	87 95       	ror	r24
     322:	96 95       	lsr	r25
     324:	87 95       	ror	r24
     326:	96 95       	lsr	r25
     328:	87 95       	ror	r24
     32a:	bc 01       	movw	r22, r24
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCD_WriteNumber>
		LCD_WriteChar('.');
     334:	8e e2       	ldi	r24, 0x2E	; 46
     336:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_WriteChar>
		LCD_WriteNumber(TEMP_READ%10);
     33a:	40 91 b6 00 	lds	r20, 0x00B6	; 0x8000b6 <__data_end>
     33e:	50 91 b7 00 	lds	r21, 0x00B7	; 0x8000b7 <__data_end+0x1>
     342:	9a 01       	movw	r18, r20
     344:	ad ec       	ldi	r26, 0xCD	; 205
     346:	bc ec       	ldi	r27, 0xCC	; 204
     348:	0e 94 1a 08 	call	0x1034	; 0x1034 <__umulhisi3>
     34c:	bc 01       	movw	r22, r24
     34e:	76 95       	lsr	r23
     350:	67 95       	ror	r22
     352:	76 95       	lsr	r23
     354:	67 95       	ror	r22
     356:	76 95       	lsr	r23
     358:	67 95       	ror	r22
     35a:	cb 01       	movw	r24, r22
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	66 0f       	add	r22, r22
     362:	77 1f       	adc	r23, r23
     364:	66 0f       	add	r22, r22
     366:	77 1f       	adc	r23, r23
     368:	66 0f       	add	r22, r22
     36a:	77 1f       	adc	r23, r23
     36c:	68 0f       	add	r22, r24
     36e:	79 1f       	adc	r23, r25
     370:	ca 01       	movw	r24, r20
     372:	86 1b       	sub	r24, r22
     374:	97 0b       	sbc	r25, r23
     376:	bc 01       	movw	r22, r24
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCD_WriteNumber>
		LCD_WriteString("      ");
     380:	8e e8       	ldi	r24, 0x8E	; 142
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_WriteString>
		
		
		flag_adc_lm35=0;
     388:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
	if (flag_adc_ldr)
     38c:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <flag_adc_ldr>
     390:	88 23       	and	r24, r24
     392:	c1 f0       	breq	.+48     	; 0x3c4 <Data_Logger_Runnable+0x194>
	{
		
		
		LCD_GoTo(2,0);
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_GoTo>
		LCD_WriteString("LDR:");
     39c:	8f e7       	ldi	r24, 0x7F	; 127
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_WriteString>
		LCD_WriteNumber(ADC_READ_ldr);
     3a4:	60 91 b8 00 	lds	r22, 0x00B8	; 0x8000b8 <ADC_READ_ldr>
     3a8:	70 91 b9 00 	lds	r23, 0x00B9	; 0x8000b9 <ADC_READ_ldr+0x1>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCD_WriteNumber>
		LCD_WriteString("                ");
     3b4:	84 e8       	ldi	r24, 0x84	; 132
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <LCD_WriteString>
		LDR_LED();
     3bc:	0e 94 a4 00 	call	0x148	; 0x148 <LDR_LED>
		
		flag_adc_ldr=0;
     3c0:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <flag_adc_ldr>
     3c4:	08 95       	ret

000003c6 <WriteIns>:
	_delay_ms(1);
	WriteIns(0x06);
}
#else
static void WriteIns(u8 ins)
{
     3c6:	cf 93       	push	r28
     3c8:	c8 2f       	mov	r28, r24
	DIO_WritePin(RS,LOW);
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	83 e0       	ldi	r24, 0x03	; 3
     3ce:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(ins,7));
     3d2:	6c 2f       	mov	r22, r28
     3d4:	66 1f       	adc	r22, r22
     3d6:	66 27       	eor	r22, r22
     3d8:	66 1f       	adc	r22, r22
     3da:	8c e0       	ldi	r24, 0x0C	; 12
     3dc:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,6));
     3e0:	c6 fb       	bst	r28, 6
     3e2:	66 27       	eor	r22, r22
     3e4:	60 f9       	bld	r22, 0
     3e6:	8a e0       	ldi	r24, 0x0A	; 10
     3e8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,5));
     3ec:	c5 fb       	bst	r28, 5
     3ee:	66 27       	eor	r22, r22
     3f0:	60 f9       	bld	r22, 0
     3f2:	89 e0       	ldi	r24, 0x09	; 9
     3f4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,4));
     3f8:	c4 fb       	bst	r28, 4
     3fa:	66 27       	eor	r22, r22
     3fc:	60 f9       	bld	r22, 0
     3fe:	88 e0       	ldi	r24, 0x08	; 8
     400:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     40c:	8f e9       	ldi	r24, 0x9F	; 159
     40e:	9f e0       	ldi	r25, 0x0F	; 15
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     414:	00 c0       	rjmp	.+0      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     416:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     420:	8f e9       	ldi	r24, 0x9F	; 159
     422:	9f e0       	ldi	r25, 0x0F	; 15
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     42a:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(D7,READ_BIT(ins,3));
     42c:	c3 fb       	bst	r28, 3
     42e:	66 27       	eor	r22, r22
     430:	60 f9       	bld	r22, 0
     432:	8c e0       	ldi	r24, 0x0C	; 12
     434:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,2));
     438:	c2 fb       	bst	r28, 2
     43a:	66 27       	eor	r22, r22
     43c:	60 f9       	bld	r22, 0
     43e:	8a e0       	ldi	r24, 0x0A	; 10
     440:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,1));
     444:	c1 fb       	bst	r28, 1
     446:	66 27       	eor	r22, r22
     448:	60 f9       	bld	r22, 0
     44a:	89 e0       	ldi	r24, 0x09	; 9
     44c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,0));
     450:	6c 2f       	mov	r22, r28
     452:	61 70       	andi	r22, 0x01	; 1
     454:	88 e0       	ldi	r24, 0x08	; 8
     456:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     462:	8f e9       	ldi	r24, 0x9F	; 159
     464:	9f e0       	ldi	r25, 0x0F	; 15
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     46c:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     476:	8f e9       	ldi	r24, 0x9F	; 159
     478:	9f e0       	ldi	r25, 0x0F	; 15
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     480:	00 00       	nop
	_delay_ms(1);
}
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <WriteData>:
static void WriteData(u8 data)
{
     486:	cf 93       	push	r28
     488:	c8 2f       	mov	r28, r24
	DIO_WritePin(RS,HIGH);
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	83 e0       	ldi	r24, 0x03	; 3
     48e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D7,READ_BIT(data,7));
     492:	6c 2f       	mov	r22, r28
     494:	66 1f       	adc	r22, r22
     496:	66 27       	eor	r22, r22
     498:	66 1f       	adc	r22, r22
     49a:	8c e0       	ldi	r24, 0x0C	; 12
     49c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,6));
     4a0:	c6 fb       	bst	r28, 6
     4a2:	66 27       	eor	r22, r22
     4a4:	60 f9       	bld	r22, 0
     4a6:	8a e0       	ldi	r24, 0x0A	; 10
     4a8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,5));
     4ac:	c5 fb       	bst	r28, 5
     4ae:	66 27       	eor	r22, r22
     4b0:	60 f9       	bld	r22, 0
     4b2:	89 e0       	ldi	r24, 0x09	; 9
     4b4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,4));
     4b8:	c4 fb       	bst	r28, 4
     4ba:	66 27       	eor	r22, r22
     4bc:	60 f9       	bld	r22, 0
     4be:	88 e0       	ldi	r24, 0x08	; 8
     4c0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     4cc:	8f e9       	ldi	r24, 0x9F	; 159
     4ce:	9f e0       	ldi	r25, 0x0F	; 15
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <WriteData+0x4a>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <WriteData+0x50>
     4d6:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     4e0:	8f e9       	ldi	r24, 0x9F	; 159
     4e2:	9f e0       	ldi	r25, 0x0F	; 15
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <WriteData+0x5e>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <WriteData+0x64>
     4ea:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(D7,READ_BIT(data,3));
     4ec:	c3 fb       	bst	r28, 3
     4ee:	66 27       	eor	r22, r22
     4f0:	60 f9       	bld	r22, 0
     4f2:	8c e0       	ldi	r24, 0x0C	; 12
     4f4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(data,2));
     4f8:	c2 fb       	bst	r28, 2
     4fa:	66 27       	eor	r22, r22
     4fc:	60 f9       	bld	r22, 0
     4fe:	8a e0       	ldi	r24, 0x0A	; 10
     500:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(data,1));
     504:	c1 fb       	bst	r28, 1
     506:	66 27       	eor	r22, r22
     508:	60 f9       	bld	r22, 0
     50a:	89 e0       	ldi	r24, 0x09	; 9
     50c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(data,0));
     510:	6c 2f       	mov	r22, r28
     512:	61 70       	andi	r22, 0x01	; 1
     514:	88 e0       	ldi	r24, 0x08	; 8
     516:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     522:	8f e9       	ldi	r24, 0x9F	; 159
     524:	9f e0       	ldi	r25, 0x0F	; 15
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <WriteData+0xa0>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <WriteData+0xa6>
     52c:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <DIO_WritePin>
     536:	8f e9       	ldi	r24, 0x9F	; 159
     538:	9f e0       	ldi	r25, 0x0F	; 15
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <WriteData+0xb4>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <WriteData+0xba>
     540:	00 00       	nop
	_delay_ms(1);
}
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <LCD_Init>:
     546:	2f e7       	ldi	r18, 0x7F	; 127
     548:	85 eb       	ldi	r24, 0xB5	; 181
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	21 50       	subi	r18, 0x01	; 1
     54e:	80 40       	sbci	r24, 0x00	; 0
     550:	90 40       	sbci	r25, 0x00	; 0
     552:	e1 f7       	brne	.-8      	; 0x54c <LCD_Init+0x6>
     554:	00 c0       	rjmp	.+0      	; 0x556 <LCD_Init+0x10>
     556:	00 00       	nop
void LCD_Init(void)
{
	_delay_ms(35);
	WriteIns(0x02);// set function
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <WriteIns>
	WriteIns(0x28);
     55e:	88 e2       	ldi	r24, 0x28	; 40
     560:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <WriteIns>
	WriteIns(0x0c);//0x0c  , 0x0e  cursor enable
     564:	8c e0       	ldi	r24, 0x0C	; 12
     566:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <WriteIns>
	WriteIns(0x01);//clear
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <WriteIns>
     570:	8f e9       	ldi	r24, 0x9F	; 159
     572:	9f e0       	ldi	r25, 0x0F	; 15
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <LCD_Init+0x2e>
     578:	00 c0       	rjmp	.+0      	; 0x57a <LCD_Init+0x34>
     57a:	00 00       	nop
	_delay_ms(1);
	WriteIns(0x06);
     57c:	86 e0       	ldi	r24, 0x06	; 6
     57e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <WriteIns>
     582:	08 95       	ret

00000584 <LCD_GoTo>:
}
#endif

void LCD_GoTo(u8 line,u8 cell)
{
	if (line ==1)
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	29 f4       	brne	.+10     	; 0x592 <LCD_GoTo+0xe>
	{
		WriteIns(0x80+cell);
     588:	80 e8       	ldi	r24, 0x80	; 128
     58a:	86 0f       	add	r24, r22
     58c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <WriteIns>
     590:	08 95       	ret

	}
	else if (line==2)
     592:	82 30       	cpi	r24, 0x02	; 2
     594:	29 f4       	brne	.+10     	; 0x5a0 <LCD_GoTo+0x1c>
	{
		WriteIns(0xc0+cell);
     596:	80 ec       	ldi	r24, 0xC0	; 192
     598:	86 0f       	add	r24, r22
     59a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <WriteIns>
     59e:	08 95       	ret
	}
	else if (line==3)
     5a0:	83 30       	cpi	r24, 0x03	; 3
     5a2:	29 f4       	brne	.+10     	; 0x5ae <LCD_GoTo+0x2a>
	{
		WriteIns(0x94+cell);
     5a4:	84 e9       	ldi	r24, 0x94	; 148
     5a6:	86 0f       	add	r24, r22
     5a8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <WriteIns>
     5ac:	08 95       	ret
	}
	else if (line==4)
     5ae:	84 30       	cpi	r24, 0x04	; 4
     5b0:	21 f4       	brne	.+8      	; 0x5ba <LCD_GoTo+0x36>
	{
		WriteIns(0xd4+cell);
     5b2:	84 ed       	ldi	r24, 0xD4	; 212
     5b4:	86 0f       	add	r24, r22
     5b6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <WriteIns>
     5ba:	08 95       	ret

000005bc <LCD_WriteChar>:
	
}

void LCD_WriteChar(u8 ch)
{
	WriteData(ch);
     5bc:	0e 94 43 02 	call	0x486	; 0x486 <WriteData>
     5c0:	08 95       	ret

000005c2 <LCD_WriteString>:
}

void LCD_WriteString(c8* str)
{
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	8c 01       	movw	r16, r24
	u8 i=0;
	for (i=0;str[i];i++)
     5ca:	c0 e0       	ldi	r28, 0x00	; 0
     5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <LCD_WriteString+0x12>
	{
		WriteData(str[i]);
     5ce:	0e 94 43 02 	call	0x486	; 0x486 <WriteData>
}

void LCD_WriteString(c8* str)
{
	u8 i=0;
	for (i=0;str[i];i++)
     5d2:	cf 5f       	subi	r28, 0xFF	; 255
     5d4:	f8 01       	movw	r30, r16
     5d6:	ec 0f       	add	r30, r28
     5d8:	f1 1d       	adc	r31, r1
     5da:	80 81       	ld	r24, Z
     5dc:	81 11       	cpse	r24, r1
     5de:	f7 cf       	rjmp	.-18     	; 0x5ce <LCD_WriteString+0xc>
	{
		WriteData(str[i]);
	}
}
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	08 95       	ret

000005e8 <LCD_WriteNumber>:


void LCD_WriteNumber(s32 num)
{
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	2a 97       	sbiw	r28, 0x0a	; 10
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	6b 01       	movw	r12, r22
     608:	7c 01       	movw	r14, r24
	u8 str[10],i;
	
	
	if (num==0)
     60a:	61 15       	cp	r22, r1
     60c:	71 05       	cpc	r23, r1
     60e:	81 05       	cpc	r24, r1
     610:	91 05       	cpc	r25, r1
     612:	21 f4       	brne	.+8      	; 0x61c <LCD_WriteNumber+0x34>
	{
		LCD_WriteChar('0');
     614:	80 e3       	ldi	r24, 0x30	; 48
     616:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_WriteChar>
     61a:	0d c0       	rjmp	.+26     	; 0x636 <LCD_WriteNumber+0x4e>
	}
	else if (num<0)
     61c:	99 23       	and	r25, r25
     61e:	5c f4       	brge	.+22     	; 0x636 <LCD_WriteNumber+0x4e>
	{
		LCD_WriteChar('-');
     620:	8d e2       	ldi	r24, 0x2D	; 45
     622:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_WriteChar>
		num = num*-1;
     626:	f0 94       	com	r15
     628:	e0 94       	com	r14
     62a:	d0 94       	com	r13
     62c:	c0 94       	com	r12
     62e:	c1 1c       	adc	r12, r1
     630:	d1 1c       	adc	r13, r1
     632:	e1 1c       	adc	r14, r1
     634:	f1 1c       	adc	r15, r1
	}
}


void LCD_WriteNumber(s32 num)
{
     636:	10 e0       	ldi	r17, 0x00	; 0
     638:	15 c0       	rjmp	.+42     	; 0x664 <LCD_WriteNumber+0x7c>
		num = num*-1;
	}
	
	for (i=0;num>0;i++)
	{
		str[i] = ((num%10)+'0');
     63a:	c7 01       	movw	r24, r14
     63c:	b6 01       	movw	r22, r12
     63e:	2a e0       	ldi	r18, 0x0A	; 10
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	0e 94 fb 07 	call	0xff6	; 0xff6 <__divmodsi4>
     64a:	e1 e0       	ldi	r30, 0x01	; 1
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	ec 0f       	add	r30, r28
     650:	fd 1f       	adc	r31, r29
     652:	e1 0f       	add	r30, r17
     654:	f1 1d       	adc	r31, r1
     656:	60 5d       	subi	r22, 0xD0	; 208
     658:	60 83       	st	Z, r22
		num = num/10;
     65a:	c2 2e       	mov	r12, r18
     65c:	d3 2e       	mov	r13, r19
     65e:	e4 2e       	mov	r14, r20
     660:	f5 2e       	mov	r15, r21
	{
		LCD_WriteChar('-');
		num = num*-1;
	}
	
	for (i=0;num>0;i++)
     662:	1f 5f       	subi	r17, 0xFF	; 255
     664:	1c 14       	cp	r1, r12
     666:	1d 04       	cpc	r1, r13
     668:	1e 04       	cpc	r1, r14
     66a:	1f 04       	cpc	r1, r15
     66c:	34 f3       	brlt	.-52     	; 0x63a <LCD_WriteNumber+0x52>
	{
		str[i] = ((num%10)+'0');
		num = num/10;
	}
	for (i=i-1;i!=255;i--)
     66e:	11 50       	subi	r17, 0x01	; 1
     670:	0a c0       	rjmp	.+20     	; 0x686 <LCD_WriteNumber+0x9e>
	{
		LCD_WriteChar(str[i]);
     672:	e1 e0       	ldi	r30, 0x01	; 1
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	ec 0f       	add	r30, r28
     678:	fd 1f       	adc	r31, r29
     67a:	e1 0f       	add	r30, r17
     67c:	f1 1d       	adc	r31, r1
     67e:	80 81       	ld	r24, Z
     680:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_WriteChar>
	for (i=0;num>0;i++)
	{
		str[i] = ((num%10)+'0');
		num = num/10;
	}
	for (i=i-1;i!=255;i--)
     684:	11 50       	subi	r17, 0x01	; 1
     686:	1f 3f       	cpi	r17, 0xFF	; 255
     688:	a1 f7       	brne	.-24     	; 0x672 <LCD_WriteNumber+0x8a>
	{
		LCD_WriteChar(str[i]);
	}
	
}
     68a:	2a 96       	adiw	r28, 0x0a	; 10
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	cf 90       	pop	r12
     6a4:	08 95       	ret

000006a6 <Temp_Read>:
}

u16 Temp_Read(void)
{
	u16 adc, temp;
	adc=ADC_16ReadADC();
     6a6:	0e 94 a3 03 	call	0x746	; 0x746 <ADC_16ReadADC>
	//temp=((adc*(u32)150)+512)/1024;//c (Temp ->adc)//vref 1.5v
	temp=((adc*(u32)1500))/308;//c (Temp ->adc)//vref 5v
     6aa:	9c 01       	movw	r18, r24
     6ac:	ac ed       	ldi	r26, 0xDC	; 220
     6ae:	b5 e0       	ldi	r27, 0x05	; 5
     6b0:	0e 94 1a 08 	call	0x1034	; 0x1034 <__umulhisi3>
     6b4:	24 e3       	ldi	r18, 0x34	; 52
     6b6:	31 e0       	ldi	r19, 0x01	; 1
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__udivmodsi4>
	
	return temp;
}
     6c0:	c9 01       	movw	r24, r18
     6c2:	08 95       	ret

000006c4 <main>:


int main(void)
{
	
	Data_Logger_Init();
     6c4:	0e 94 7b 00 	call	0xf6	; 0xf6 <Data_Logger_Init>
	while (1)
	{
		Data_Logger_Runnable();
     6c8:	0e 94 18 01 	call	0x230	; 0x230 <Data_Logger_Runnable>
     6cc:	fd cf       	rjmp	.-6      	; 0x6c8 <main+0x4>

000006ce <ADC_voidEnable>:
	SET_BIT(ADCSRA,ADIE);
}

void ADC_voidInterrputDisable(void)
{
	CLR_BIT(ADCSRA,ADIE);
     6ce:	86 b1       	in	r24, 0x06	; 6
     6d0:	80 68       	ori	r24, 0x80	; 128
     6d2:	86 b9       	out	0x06, r24	; 6
     6d4:	08 95       	ret

000006d6 <ADC_voidInterrputEnable>:
     6d6:	86 b1       	in	r24, 0x06	; 6
     6d8:	88 60       	ori	r24, 0x08	; 8
     6da:	86 b9       	out	0x06, r24	; 6
     6dc:	08 95       	ret

000006de <ADC_voidStartConversion>:
}

void ADC_voidStartConversion(ADC_Channel_type ch)
{
	/* set channel mux*/
	ADMUX &=0xE0;
     6de:	97 b1       	in	r25, 0x07	; 7
     6e0:	90 7e       	andi	r25, 0xE0	; 224
     6e2:	97 b9       	out	0x07, r25	; 7
	ch &=0x07;
     6e4:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
     6e6:	97 b1       	in	r25, 0x07	; 7
     6e8:	89 2b       	or	r24, r25
     6ea:	87 b9       	out	0x07, r24	; 7
	
	/*start conversion*/
	
	SET_BIT(ADCSRA,ADSC);
     6ec:	86 b1       	in	r24, 0x06	; 6
     6ee:	80 64       	ori	r24, 0x40	; 64
     6f0:	86 b9       	out	0x06, r24	; 6
     6f2:	08 95       	ret

000006f4 <ADC_Init>:
}
#if ADC_MODE==Free_Running_Mode
void ADC_Init(ADC_VoltRef_type vref,ADC_Prescaler_type scaler)
{
	/********vref*****/
	switch(vref)
     6f4:	81 30       	cpi	r24, 0x01	; 1
     6f6:	59 f0       	breq	.+22     	; 0x70e <ADC_Init+0x1a>
     6f8:	18 f0       	brcs	.+6      	; 0x700 <ADC_Init+0xc>
     6fa:	82 30       	cpi	r24, 0x02	; 2
     6fc:	79 f0       	breq	.+30     	; 0x71c <ADC_Init+0x28>
     6fe:	14 c0       	rjmp	.+40     	; 0x728 <ADC_Init+0x34>
	{
		case VREF_AREF:
		CLR_BIT(ADMUX,REFS0);
     700:	87 b1       	in	r24, 0x07	; 7
     702:	8f 7b       	andi	r24, 0xBF	; 191
     704:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX,REFS1);
     706:	87 b1       	in	r24, 0x07	; 7
     708:	8f 77       	andi	r24, 0x7F	; 127
     70a:	87 b9       	out	0x07, r24	; 7
		break ;
     70c:	0d c0       	rjmp	.+26     	; 0x728 <ADC_Init+0x34>
		case VREF_AVCC:
		SET_BIT(ADMUX,REFS0);
     70e:	87 b1       	in	r24, 0x07	; 7
     710:	80 64       	ori	r24, 0x40	; 64
     712:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX,REFS1);
     714:	87 b1       	in	r24, 0x07	; 7
     716:	8f 77       	andi	r24, 0x7F	; 127
     718:	87 b9       	out	0x07, r24	; 7
		break ;
     71a:	06 c0       	rjmp	.+12     	; 0x728 <ADC_Init+0x34>
		case VREF_256V:
		SET_BIT(ADMUX,REFS0);
     71c:	87 b1       	in	r24, 0x07	; 7
     71e:	80 64       	ori	r24, 0x40	; 64
     720:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX,REFS1);
     722:	87 b1       	in	r24, 0x07	; 7
     724:	80 68       	ori	r24, 0x80	; 128
     726:	87 b9       	out	0x07, r24	; 7
		break ;
	}
	
	/***********prescaler***********/
	
	ADCSRA &=0xf8;
     728:	86 b1       	in	r24, 0x06	; 6
     72a:	88 7f       	andi	r24, 0xF8	; 248
     72c:	86 b9       	out	0x06, r24	; 6
	scaler &=0x07;
     72e:	67 70       	andi	r22, 0x07	; 7
	ADCSRA |=scaler;
     730:	86 b1       	in	r24, 0x06	; 6
     732:	68 2b       	or	r22, r24
     734:	66 b9       	out	0x06, r22	; 6
	
	SET_BIT(ADCSRA,ADATE);
     736:	86 b1       	in	r24, 0x06	; 6
     738:	80 62       	ori	r24, 0x20	; 32
     73a:	86 b9       	out	0x06, r24	; 6
	
	ADC_voidEnable();
     73c:	0e 94 67 03 	call	0x6ce	; 0x6ce <ADC_voidEnable>
	ADC_voidInterrputEnable();
     740:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <ADC_voidInterrputEnable>
     744:	08 95       	ret

00000746 <ADC_16ReadADC>:
{
	//u16 r;
	/* w8 ADC finish**/
	
	#if ADC_MODE==Free_Running_Mode
	return ADC;
     746:	84 b1       	in	r24, 0x04	; 4
     748:	95 b1       	in	r25, 0x05	; 5
	/*get read*/
	//CLR_BIT(ADMUX,ADLAR);
	//r=ADCL + (READ_BIT(ADCH,0)*256)+(READ_BIT(ADCH,1)*512);
	return ADC;
	#endif
}
     74a:	08 95       	ret

0000074c <ADC_SetCallback>:


void ADC_SetCallback( void (*local_fptr) (void) )
{
	Adc_Fptr=local_fptr;
     74c:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <Adc_Fptr+0x1>
     750:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <Adc_Fptr>
     754:	08 95       	ret

00000756 <ADC_Chain>:
}

void ADC_Chain(ADC_Channel_type ch)
{
	ADC_voidStartConversion(ch);
     756:	0e 94 6f 03 	call	0x6de	; 0x6de <ADC_voidStartConversion>
     75a:	08 95       	ret

0000075c <__vector_16>:
}

ISR(ADC_vect)
{
     75c:	1f 92       	push	r1
     75e:	0f 92       	push	r0
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	0f 92       	push	r0
     764:	11 24       	eor	r1, r1
     766:	2f 93       	push	r18
     768:	3f 93       	push	r19
     76a:	4f 93       	push	r20
     76c:	5f 93       	push	r21
     76e:	6f 93       	push	r22
     770:	7f 93       	push	r23
     772:	8f 93       	push	r24
     774:	9f 93       	push	r25
     776:	af 93       	push	r26
     778:	bf 93       	push	r27
     77a:	ef 93       	push	r30
     77c:	ff 93       	push	r31
	if (Adc_Fptr!=NULL_PTR)
     77e:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <Adc_Fptr>
     782:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <Adc_Fptr+0x1>
     786:	30 97       	sbiw	r30, 0x00	; 0
     788:	09 f0       	breq	.+2      	; 0x78c <__vector_16+0x30>
	{
		Adc_Fptr();
     78a:	09 95       	icall
	}
	
}
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	0f 90       	pop	r0
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	0f 90       	pop	r0
     7aa:	1f 90       	pop	r1
     7ac:	18 95       	reti

000007ae <DIO_InitPin>:
		volt=READ_BIT(PIND,pin_num);
		break;
		
	}
	return volt;
}
     7ae:	98 2f       	mov	r25, r24
     7b0:	97 70       	andi	r25, 0x07	; 7
     7b2:	86 95       	lsr	r24
     7b4:	86 95       	lsr	r24
     7b6:	86 95       	lsr	r24
     7b8:	61 30       	cpi	r22, 0x01	; 1
     7ba:	09 f4       	brne	.+2      	; 0x7be <DIO_InitPin+0x10>
     7bc:	55 c0       	rjmp	.+170    	; 0x868 <__stack+0x9>
     7be:	20 f0       	brcs	.+8      	; 0x7c8 <DIO_InitPin+0x1a>
     7c0:	62 30       	cpi	r22, 0x02	; 2
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <DIO_InitPin+0x18>
     7c4:	a1 c0       	rjmp	.+322    	; 0x908 <__stack+0xa9>
     7c6:	08 95       	ret
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	c1 f0       	breq	.+48     	; 0x7fc <DIO_InitPin+0x4e>
     7cc:	28 f0       	brcs	.+10     	; 0x7d8 <DIO_InitPin+0x2a>
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	39 f1       	breq	.+78     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     7d2:	83 30       	cpi	r24, 0x03	; 3
     7d4:	b9 f1       	breq	.+110    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     7d6:	08 95       	ret
     7d8:	4a b3       	in	r20, 0x1a	; 26
     7da:	21 e0       	ldi	r18, 0x01	; 1
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	b9 01       	movw	r22, r18
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <DIO_InitPin+0x38>
     7e2:	66 0f       	add	r22, r22
     7e4:	77 1f       	adc	r23, r23
     7e6:	9a 95       	dec	r25
     7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <DIO_InitPin+0x34>
     7ea:	cb 01       	movw	r24, r22
     7ec:	94 2f       	mov	r25, r20
     7ee:	98 2b       	or	r25, r24
     7f0:	9a bb       	out	0x1a, r25	; 26
     7f2:	9b b3       	in	r25, 0x1b	; 27
     7f4:	80 95       	com	r24
     7f6:	89 23       	and	r24, r25
     7f8:	8b bb       	out	0x1b, r24	; 27
     7fa:	08 95       	ret
     7fc:	47 b3       	in	r20, 0x17	; 23
     7fe:	21 e0       	ldi	r18, 0x01	; 1
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	b9 01       	movw	r22, r18
     804:	02 c0       	rjmp	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     806:	66 0f       	add	r22, r22
     808:	77 1f       	adc	r23, r23
     80a:	9a 95       	dec	r25
     80c:	e2 f7       	brpl	.-8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     80e:	cb 01       	movw	r24, r22
     810:	94 2f       	mov	r25, r20
     812:	98 2b       	or	r25, r24
     814:	97 bb       	out	0x17, r25	; 23
     816:	98 b3       	in	r25, 0x18	; 24
     818:	80 95       	com	r24
     81a:	89 23       	and	r24, r25
     81c:	88 bb       	out	0x18, r24	; 24
     81e:	08 95       	ret
     820:	44 b3       	in	r20, 0x14	; 20
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	b9 01       	movw	r22, r18
     828:	02 c0       	rjmp	.+4      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     82a:	66 0f       	add	r22, r22
     82c:	77 1f       	adc	r23, r23
     82e:	9a 95       	dec	r25
     830:	e2 f7       	brpl	.-8      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     832:	cb 01       	movw	r24, r22
     834:	94 2f       	mov	r25, r20
     836:	98 2b       	or	r25, r24
     838:	94 bb       	out	0x14, r25	; 20
     83a:	95 b3       	in	r25, 0x15	; 21
     83c:	80 95       	com	r24
     83e:	89 23       	and	r24, r25
     840:	85 bb       	out	0x15, r24	; 21
     842:	08 95       	ret
     844:	41 b3       	in	r20, 0x11	; 17
     846:	21 e0       	ldi	r18, 0x01	; 1
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	b9 01       	movw	r22, r18
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     84e:	66 0f       	add	r22, r22
     850:	77 1f       	adc	r23, r23
     852:	9a 95       	dec	r25
     854:	e2 f7       	brpl	.-8      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     856:	cb 01       	movw	r24, r22
     858:	94 2f       	mov	r25, r20
     85a:	98 2b       	or	r25, r24
     85c:	91 bb       	out	0x11, r25	; 17
     85e:	92 b3       	in	r25, 0x12	; 18
     860:	80 95       	com	r24
     862:	89 23       	and	r24, r25
     864:	82 bb       	out	0x12, r24	; 18
     866:	08 95       	ret
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	c1 f0       	breq	.+48     	; 0x89c <__stack+0x3d>
     86c:	28 f0       	brcs	.+10     	; 0x878 <__stack+0x19>
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	39 f1       	breq	.+78     	; 0x8c0 <__stack+0x61>
     872:	83 30       	cpi	r24, 0x03	; 3
     874:	b9 f1       	breq	.+110    	; 0x8e4 <__stack+0x85>
     876:	08 95       	ret
     878:	4a b3       	in	r20, 0x1a	; 26
     87a:	21 e0       	ldi	r18, 0x01	; 1
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	b9 01       	movw	r22, r18
     880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
     882:	66 0f       	add	r22, r22
     884:	77 1f       	adc	r23, r23
     886:	9a 95       	dec	r25
     888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
     88a:	cb 01       	movw	r24, r22
     88c:	80 95       	com	r24
     88e:	94 2f       	mov	r25, r20
     890:	98 23       	and	r25, r24
     892:	9a bb       	out	0x1a, r25	; 26
     894:	9b b3       	in	r25, 0x1b	; 27
     896:	89 23       	and	r24, r25
     898:	8b bb       	out	0x1b, r24	; 27
     89a:	08 95       	ret
     89c:	47 b3       	in	r20, 0x17	; 23
     89e:	21 e0       	ldi	r18, 0x01	; 1
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	b9 01       	movw	r22, r18
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
     8a6:	66 0f       	add	r22, r22
     8a8:	77 1f       	adc	r23, r23
     8aa:	9a 95       	dec	r25
     8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
     8ae:	cb 01       	movw	r24, r22
     8b0:	80 95       	com	r24
     8b2:	94 2f       	mov	r25, r20
     8b4:	98 23       	and	r25, r24
     8b6:	97 bb       	out	0x17, r25	; 23
     8b8:	98 b3       	in	r25, 0x18	; 24
     8ba:	89 23       	and	r24, r25
     8bc:	88 bb       	out	0x18, r24	; 24
     8be:	08 95       	ret
     8c0:	44 b3       	in	r20, 0x14	; 20
     8c2:	21 e0       	ldi	r18, 0x01	; 1
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	b9 01       	movw	r22, r18
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
     8ca:	66 0f       	add	r22, r22
     8cc:	77 1f       	adc	r23, r23
     8ce:	9a 95       	dec	r25
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
     8d2:	cb 01       	movw	r24, r22
     8d4:	80 95       	com	r24
     8d6:	94 2f       	mov	r25, r20
     8d8:	98 23       	and	r25, r24
     8da:	94 bb       	out	0x14, r25	; 20
     8dc:	95 b3       	in	r25, 0x15	; 21
     8de:	89 23       	and	r24, r25
     8e0:	85 bb       	out	0x15, r24	; 21
     8e2:	08 95       	ret
     8e4:	41 b3       	in	r20, 0x11	; 17
     8e6:	21 e0       	ldi	r18, 0x01	; 1
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	b9 01       	movw	r22, r18
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
     8ee:	66 0f       	add	r22, r22
     8f0:	77 1f       	adc	r23, r23
     8f2:	9a 95       	dec	r25
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <__stack+0x8f>
     8f6:	cb 01       	movw	r24, r22
     8f8:	80 95       	com	r24
     8fa:	94 2f       	mov	r25, r20
     8fc:	98 23       	and	r25, r24
     8fe:	91 bb       	out	0x11, r25	; 17
     900:	92 b3       	in	r25, 0x12	; 18
     902:	89 23       	and	r24, r25
     904:	82 bb       	out	0x12, r24	; 18
     906:	08 95       	ret
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	c1 f0       	breq	.+48     	; 0x93c <__stack+0xdd>
     90c:	28 f0       	brcs	.+10     	; 0x918 <__stack+0xb9>
     90e:	82 30       	cpi	r24, 0x02	; 2
     910:	39 f1       	breq	.+78     	; 0x960 <__stack+0x101>
     912:	83 30       	cpi	r24, 0x03	; 3
     914:	b9 f1       	breq	.+110    	; 0x984 <__stack+0x125>
     916:	08 95       	ret
     918:	4a b3       	in	r20, 0x1a	; 26
     91a:	21 e0       	ldi	r18, 0x01	; 1
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	b9 01       	movw	r22, r18
     920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0xc7>
     922:	66 0f       	add	r22, r22
     924:	77 1f       	adc	r23, r23
     926:	9a 95       	dec	r25
     928:	e2 f7       	brpl	.-8      	; 0x922 <__stack+0xc3>
     92a:	cb 01       	movw	r24, r22
     92c:	96 2f       	mov	r25, r22
     92e:	90 95       	com	r25
     930:	94 23       	and	r25, r20
     932:	9a bb       	out	0x1a, r25	; 26
     934:	9b b3       	in	r25, 0x1b	; 27
     936:	89 2b       	or	r24, r25
     938:	8b bb       	out	0x1b, r24	; 27
     93a:	08 95       	ret
     93c:	47 b3       	in	r20, 0x17	; 23
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	b9 01       	movw	r22, r18
     944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0xeb>
     946:	66 0f       	add	r22, r22
     948:	77 1f       	adc	r23, r23
     94a:	9a 95       	dec	r25
     94c:	e2 f7       	brpl	.-8      	; 0x946 <__stack+0xe7>
     94e:	cb 01       	movw	r24, r22
     950:	96 2f       	mov	r25, r22
     952:	90 95       	com	r25
     954:	94 23       	and	r25, r20
     956:	97 bb       	out	0x17, r25	; 23
     958:	98 b3       	in	r25, 0x18	; 24
     95a:	89 2b       	or	r24, r25
     95c:	88 bb       	out	0x18, r24	; 24
     95e:	08 95       	ret
     960:	44 b3       	in	r20, 0x14	; 20
     962:	21 e0       	ldi	r18, 0x01	; 1
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	b9 01       	movw	r22, r18
     968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x10f>
     96a:	66 0f       	add	r22, r22
     96c:	77 1f       	adc	r23, r23
     96e:	9a 95       	dec	r25
     970:	e2 f7       	brpl	.-8      	; 0x96a <__stack+0x10b>
     972:	cb 01       	movw	r24, r22
     974:	96 2f       	mov	r25, r22
     976:	90 95       	com	r25
     978:	94 23       	and	r25, r20
     97a:	94 bb       	out	0x14, r25	; 20
     97c:	95 b3       	in	r25, 0x15	; 21
     97e:	89 2b       	or	r24, r25
     980:	85 bb       	out	0x15, r24	; 21
     982:	08 95       	ret
     984:	41 b3       	in	r20, 0x11	; 17
     986:	21 e0       	ldi	r18, 0x01	; 1
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	b9 01       	movw	r22, r18
     98c:	02 c0       	rjmp	.+4      	; 0x992 <__stack+0x133>
     98e:	66 0f       	add	r22, r22
     990:	77 1f       	adc	r23, r23
     992:	9a 95       	dec	r25
     994:	e2 f7       	brpl	.-8      	; 0x98e <__stack+0x12f>
     996:	cb 01       	movw	r24, r22
     998:	96 2f       	mov	r25, r22
     99a:	90 95       	com	r25
     99c:	94 23       	and	r25, r20
     99e:	91 bb       	out	0x11, r25	; 17
     9a0:	92 b3       	in	r25, 0x12	; 18
     9a2:	89 2b       	or	r24, r25
     9a4:	82 bb       	out	0x12, r24	; 18
     9a6:	08 95       	ret

000009a8 <DIO_Init>:
     9a8:	cf 93       	push	r28
     9aa:	c0 e0       	ldi	r28, 0x00	; 0
     9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <DIO_Init+0x18>
     9ae:	ec 2f       	mov	r30, r28
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	eb 56       	subi	r30, 0x6B	; 107
     9b4:	ff 4f       	sbci	r31, 0xFF	; 255
     9b6:	60 81       	ld	r22, Z
     9b8:	8c 2f       	mov	r24, r28
     9ba:	0e 94 d7 03 	call	0x7ae	; 0x7ae <DIO_InitPin>
     9be:	cf 5f       	subi	r28, 0xFF	; 255
     9c0:	c0 32       	cpi	r28, 0x20	; 32
     9c2:	a8 f3       	brcs	.-22     	; 0x9ae <DIO_Init+0x6>
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <DIO_WritePin>:
void DIO_WritePin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
{
	u8 pin_num =pin%8;
     9c8:	98 2f       	mov	r25, r24
     9ca:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port =pin/8;
     9cc:	86 95       	lsr	r24
     9ce:	86 95       	lsr	r24
     9d0:	86 95       	lsr	r24
	if (volt==HIGH)
     9d2:	61 30       	cpi	r22, 0x01	; 1
     9d4:	e1 f5       	brne	.+120    	; 0xa4e <DIO_WritePin+0x86>
	{
		switch(port)
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	99 f0       	breq	.+38     	; 0xa00 <DIO_WritePin+0x38>
     9da:	28 f0       	brcs	.+10     	; 0x9e6 <DIO_WritePin+0x1e>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	e9 f0       	breq	.+58     	; 0xa1a <DIO_WritePin+0x52>
     9e0:	83 30       	cpi	r24, 0x03	; 3
     9e2:	41 f1       	breq	.+80     	; 0xa34 <DIO_WritePin+0x6c>
     9e4:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,pin_num);
     9e6:	4b b3       	in	r20, 0x1b	; 27
     9e8:	21 e0       	ldi	r18, 0x01	; 1
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	b9 01       	movw	r22, r18
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <DIO_WritePin+0x2c>
     9f0:	66 0f       	add	r22, r22
     9f2:	77 1f       	adc	r23, r23
     9f4:	9a 95       	dec	r25
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <DIO_WritePin+0x28>
     9f8:	cb 01       	movw	r24, r22
     9fa:	84 2b       	or	r24, r20
     9fc:	8b bb       	out	0x1b, r24	; 27
			break;
     9fe:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
     a00:	48 b3       	in	r20, 0x18	; 24
     a02:	21 e0       	ldi	r18, 0x01	; 1
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	b9 01       	movw	r22, r18
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <DIO_WritePin+0x46>
     a0a:	66 0f       	add	r22, r22
     a0c:	77 1f       	adc	r23, r23
     a0e:	9a 95       	dec	r25
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <DIO_WritePin+0x42>
     a12:	cb 01       	movw	r24, r22
     a14:	84 2b       	or	r24, r20
     a16:	88 bb       	out	0x18, r24	; 24
			break;
     a18:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
     a1a:	45 b3       	in	r20, 0x15	; 21
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	b9 01       	movw	r22, r18
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <DIO_WritePin+0x60>
     a24:	66 0f       	add	r22, r22
     a26:	77 1f       	adc	r23, r23
     a28:	9a 95       	dec	r25
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <DIO_WritePin+0x5c>
     a2c:	cb 01       	movw	r24, r22
     a2e:	84 2b       	or	r24, r20
     a30:	85 bb       	out	0x15, r24	; 21
			break;
     a32:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
     a34:	42 b3       	in	r20, 0x12	; 18
     a36:	21 e0       	ldi	r18, 0x01	; 1
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	b9 01       	movw	r22, r18
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <DIO_WritePin+0x7a>
     a3e:	66 0f       	add	r22, r22
     a40:	77 1f       	adc	r23, r23
     a42:	9a 95       	dec	r25
     a44:	e2 f7       	brpl	.-8      	; 0xa3e <DIO_WritePin+0x76>
     a46:	cb 01       	movw	r24, r22
     a48:	84 2b       	or	r24, r20
     a4a:	82 bb       	out	0x12, r24	; 18
			break;
     a4c:	08 95       	ret
			
		}
	}
	else
	{
		switch(port)
     a4e:	81 30       	cpi	r24, 0x01	; 1
     a50:	a1 f0       	breq	.+40     	; 0xa7a <DIO_WritePin+0xb2>
     a52:	28 f0       	brcs	.+10     	; 0xa5e <DIO_WritePin+0x96>
     a54:	82 30       	cpi	r24, 0x02	; 2
     a56:	f9 f0       	breq	.+62     	; 0xa96 <DIO_WritePin+0xce>
     a58:	83 30       	cpi	r24, 0x03	; 3
     a5a:	59 f1       	breq	.+86     	; 0xab2 <DIO_WritePin+0xea>
     a5c:	08 95       	ret
		{
			case PA:
			CLR_BIT(PORTA,pin_num);
     a5e:	4b b3       	in	r20, 0x1b	; 27
     a60:	21 e0       	ldi	r18, 0x01	; 1
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	b9 01       	movw	r22, r18
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <DIO_WritePin+0xa4>
     a68:	66 0f       	add	r22, r22
     a6a:	77 1f       	adc	r23, r23
     a6c:	9a 95       	dec	r25
     a6e:	e2 f7       	brpl	.-8      	; 0xa68 <DIO_WritePin+0xa0>
     a70:	cb 01       	movw	r24, r22
     a72:	80 95       	com	r24
     a74:	84 23       	and	r24, r20
     a76:	8b bb       	out	0x1b, r24	; 27
			break;
     a78:	08 95       	ret
			case PB:
			CLR_BIT(PORTB,pin_num);
     a7a:	48 b3       	in	r20, 0x18	; 24
     a7c:	21 e0       	ldi	r18, 0x01	; 1
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	b9 01       	movw	r22, r18
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <DIO_WritePin+0xc0>
     a84:	66 0f       	add	r22, r22
     a86:	77 1f       	adc	r23, r23
     a88:	9a 95       	dec	r25
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <DIO_WritePin+0xbc>
     a8c:	cb 01       	movw	r24, r22
     a8e:	80 95       	com	r24
     a90:	84 23       	and	r24, r20
     a92:	88 bb       	out	0x18, r24	; 24
			break;
     a94:	08 95       	ret
			case PC:
			CLR_BIT(PORTC,pin_num);
     a96:	45 b3       	in	r20, 0x15	; 21
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	b9 01       	movw	r22, r18
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <DIO_WritePin+0xdc>
     aa0:	66 0f       	add	r22, r22
     aa2:	77 1f       	adc	r23, r23
     aa4:	9a 95       	dec	r25
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <DIO_WritePin+0xd8>
     aa8:	cb 01       	movw	r24, r22
     aaa:	80 95       	com	r24
     aac:	84 23       	and	r24, r20
     aae:	85 bb       	out	0x15, r24	; 21
			break;
     ab0:	08 95       	ret
			case PD:
			CLR_BIT(PORTD,pin_num);
     ab2:	42 b3       	in	r20, 0x12	; 18
     ab4:	21 e0       	ldi	r18, 0x01	; 1
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	b9 01       	movw	r22, r18
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <DIO_WritePin+0xf8>
     abc:	66 0f       	add	r22, r22
     abe:	77 1f       	adc	r23, r23
     ac0:	9a 95       	dec	r25
     ac2:	e2 f7       	brpl	.-8      	; 0xabc <DIO_WritePin+0xf4>
     ac4:	cb 01       	movw	r24, r22
     ac6:	80 95       	com	r24
     ac8:	84 23       	and	r24, r20
     aca:	82 bb       	out	0x12, r24	; 18
     acc:	08 95       	ret

00000ace <EXI_Enable>:

void EXI_Init(void)
{
	EXI_TriggerEdge(EX_INT0,RISING_EDGE);
	EXI_TriggerEdge(EX_INT1,RISING_EDGE);
	EXI_TriggerEdge(EX_INT2,RISING_EDGE);
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	41 f0       	breq	.+16     	; 0xae2 <EXI_Enable+0x14>
     ad2:	18 f0       	brcs	.+6      	; 0xada <EXI_Enable+0xc>
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	49 f0       	breq	.+18     	; 0xaea <EXI_Enable+0x1c>
     ad8:	08 95       	ret
     ada:	8b b7       	in	r24, 0x3b	; 59
     adc:	80 64       	ori	r24, 0x40	; 64
     ade:	8b bf       	out	0x3b, r24	; 59
     ae0:	08 95       	ret
     ae2:	8b b7       	in	r24, 0x3b	; 59
     ae4:	80 68       	ori	r24, 0x80	; 128
     ae6:	8b bf       	out	0x3b, r24	; 59
     ae8:	08 95       	ret
     aea:	8b b7       	in	r24, 0x3b	; 59
     aec:	80 62       	ori	r24, 0x20	; 32
     aee:	8b bf       	out	0x3b, r24	; 59
     af0:	08 95       	ret

00000af2 <EXI_TriggerEdge>:
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	49 f1       	breq	.+82     	; 0xb48 <EXI_TriggerEdge+0x56>
     af6:	20 f0       	brcs	.+8      	; 0xb00 <EXI_TriggerEdge+0xe>
     af8:	82 30       	cpi	r24, 0x02	; 2
     afa:	09 f4       	brne	.+2      	; 0xafe <EXI_TriggerEdge+0xc>
     afc:	49 c0       	rjmp	.+146    	; 0xb90 <EXI_TriggerEdge+0x9e>
     afe:	08 95       	ret
     b00:	61 30       	cpi	r22, 0x01	; 1
     b02:	69 f0       	breq	.+26     	; 0xb1e <EXI_TriggerEdge+0x2c>
     b04:	28 f0       	brcs	.+10     	; 0xb10 <EXI_TriggerEdge+0x1e>
     b06:	62 30       	cpi	r22, 0x02	; 2
     b08:	c1 f0       	breq	.+48     	; 0xb3a <EXI_TriggerEdge+0x48>
     b0a:	63 30       	cpi	r22, 0x03	; 3
     b0c:	79 f0       	breq	.+30     	; 0xb2c <EXI_TriggerEdge+0x3a>
     b0e:	08 95       	ret
     b10:	85 b7       	in	r24, 0x35	; 53
     b12:	8e 7f       	andi	r24, 0xFE	; 254
     b14:	85 bf       	out	0x35, r24	; 53
     b16:	85 b7       	in	r24, 0x35	; 53
     b18:	8d 7f       	andi	r24, 0xFD	; 253
     b1a:	85 bf       	out	0x35, r24	; 53
     b1c:	08 95       	ret
     b1e:	85 b7       	in	r24, 0x35	; 53
     b20:	81 60       	ori	r24, 0x01	; 1
     b22:	85 bf       	out	0x35, r24	; 53
     b24:	85 b7       	in	r24, 0x35	; 53
     b26:	8d 7f       	andi	r24, 0xFD	; 253
     b28:	85 bf       	out	0x35, r24	; 53
     b2a:	08 95       	ret
     b2c:	85 b7       	in	r24, 0x35	; 53
     b2e:	81 60       	ori	r24, 0x01	; 1
     b30:	85 bf       	out	0x35, r24	; 53
     b32:	85 b7       	in	r24, 0x35	; 53
     b34:	82 60       	ori	r24, 0x02	; 2
     b36:	85 bf       	out	0x35, r24	; 53
     b38:	08 95       	ret
     b3a:	85 b7       	in	r24, 0x35	; 53
     b3c:	8e 7f       	andi	r24, 0xFE	; 254
     b3e:	85 bf       	out	0x35, r24	; 53
     b40:	85 b7       	in	r24, 0x35	; 53
     b42:	82 60       	ori	r24, 0x02	; 2
     b44:	85 bf       	out	0x35, r24	; 53
     b46:	08 95       	ret
     b48:	61 30       	cpi	r22, 0x01	; 1
     b4a:	69 f0       	breq	.+26     	; 0xb66 <EXI_TriggerEdge+0x74>
     b4c:	28 f0       	brcs	.+10     	; 0xb58 <EXI_TriggerEdge+0x66>
     b4e:	62 30       	cpi	r22, 0x02	; 2
     b50:	c1 f0       	breq	.+48     	; 0xb82 <EXI_TriggerEdge+0x90>
     b52:	63 30       	cpi	r22, 0x03	; 3
     b54:	79 f0       	breq	.+30     	; 0xb74 <EXI_TriggerEdge+0x82>
     b56:	08 95       	ret
     b58:	85 b7       	in	r24, 0x35	; 53
     b5a:	8b 7f       	andi	r24, 0xFB	; 251
     b5c:	85 bf       	out	0x35, r24	; 53
     b5e:	85 b7       	in	r24, 0x35	; 53
     b60:	87 7f       	andi	r24, 0xF7	; 247
     b62:	85 bf       	out	0x35, r24	; 53
     b64:	08 95       	ret
     b66:	85 b7       	in	r24, 0x35	; 53
     b68:	84 60       	ori	r24, 0x04	; 4
     b6a:	85 bf       	out	0x35, r24	; 53
     b6c:	85 b7       	in	r24, 0x35	; 53
     b6e:	87 7f       	andi	r24, 0xF7	; 247
     b70:	85 bf       	out	0x35, r24	; 53
     b72:	08 95       	ret
     b74:	85 b7       	in	r24, 0x35	; 53
     b76:	84 60       	ori	r24, 0x04	; 4
     b78:	85 bf       	out	0x35, r24	; 53
     b7a:	85 b7       	in	r24, 0x35	; 53
     b7c:	88 60       	ori	r24, 0x08	; 8
     b7e:	85 bf       	out	0x35, r24	; 53
     b80:	08 95       	ret
     b82:	85 b7       	in	r24, 0x35	; 53
     b84:	8b 7f       	andi	r24, 0xFB	; 251
     b86:	85 bf       	out	0x35, r24	; 53
     b88:	85 b7       	in	r24, 0x35	; 53
     b8a:	88 60       	ori	r24, 0x08	; 8
     b8c:	85 bf       	out	0x35, r24	; 53
     b8e:	08 95       	ret
     b90:	62 30       	cpi	r22, 0x02	; 2
     b92:	31 f0       	breq	.+12     	; 0xba0 <EXI_TriggerEdge+0xae>
     b94:	63 30       	cpi	r22, 0x03	; 3
     b96:	41 f4       	brne	.+16     	; 0xba8 <EXI_TriggerEdge+0xb6>
     b98:	84 b7       	in	r24, 0x34	; 52
     b9a:	80 64       	ori	r24, 0x40	; 64
     b9c:	84 bf       	out	0x34, r24	; 52
     b9e:	08 95       	ret
     ba0:	84 b7       	in	r24, 0x34	; 52
     ba2:	8f 7b       	andi	r24, 0xBF	; 191
     ba4:	84 bf       	out	0x34, r24	; 52
     ba6:	08 95       	ret
     ba8:	84 b7       	in	r24, 0x34	; 52
     baa:	8f 7b       	andi	r24, 0xBF	; 191
     bac:	84 bf       	out	0x34, r24	; 52
     bae:	08 95       	ret

00000bb0 <EXI_SetCallBack>:


/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
	switch(Interrupt){
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	49 f0       	breq	.+18     	; 0xbc6 <EXI_SetCallBack+0x16>
     bb4:	18 f0       	brcs	.+6      	; 0xbbc <EXI_SetCallBack+0xc>
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	59 f0       	breq	.+22     	; 0xbd0 <EXI_SetCallBack+0x20>
     bba:	08 95       	ret
		case EX_INT0:
		INT0_Fptr=LocalPtr;
     bbc:	70 93 c3 00 	sts	0x00C3, r23	; 0x8000c3 <INT0_Fptr+0x1>
     bc0:	60 93 c2 00 	sts	0x00C2, r22	; 0x8000c2 <INT0_Fptr>
		break;
     bc4:	08 95       	ret
		case EX_INT1:
		INT1_Fptr=LocalPtr;
     bc6:	70 93 c1 00 	sts	0x00C1, r23	; 0x8000c1 <INT1_Fptr+0x1>
     bca:	60 93 c0 00 	sts	0x00C0, r22	; 0x8000c0 <INT1_Fptr>
		break;
     bce:	08 95       	ret
		case EX_INT2:
		INT2_Fptr=LocalPtr;
     bd0:	70 93 bf 00 	sts	0x00BF, r23	; 0x8000bf <INT2_Fptr+0x1>
     bd4:	60 93 be 00 	sts	0x00BE, r22	; 0x8000be <INT2_Fptr>
     bd8:	08 95       	ret

00000bda <__vector_1>:


/*******************************ISR********************************/

ISR(INT0_vect)
{
     bda:	1f 92       	push	r1
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	0f 92       	push	r0
     be2:	11 24       	eor	r1, r1
     be4:	2f 93       	push	r18
     be6:	3f 93       	push	r19
     be8:	4f 93       	push	r20
     bea:	5f 93       	push	r21
     bec:	6f 93       	push	r22
     bee:	7f 93       	push	r23
     bf0:	8f 93       	push	r24
     bf2:	9f 93       	push	r25
     bf4:	af 93       	push	r26
     bf6:	bf 93       	push	r27
     bf8:	ef 93       	push	r30
     bfa:	ff 93       	push	r31
	if (INT0_Fptr!=NULL_PTR)
     bfc:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <INT0_Fptr>
     c00:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <INT0_Fptr+0x1>
     c04:	30 97       	sbiw	r30, 0x00	; 0
     c06:	09 f0       	breq	.+2      	; 0xc0a <__vector_1+0x30>
	{
		INT0_Fptr();
     c08:	09 95       	icall
	}
	
}
     c0a:	ff 91       	pop	r31
     c0c:	ef 91       	pop	r30
     c0e:	bf 91       	pop	r27
     c10:	af 91       	pop	r26
     c12:	9f 91       	pop	r25
     c14:	8f 91       	pop	r24
     c16:	7f 91       	pop	r23
     c18:	6f 91       	pop	r22
     c1a:	5f 91       	pop	r21
     c1c:	4f 91       	pop	r20
     c1e:	3f 91       	pop	r19
     c20:	2f 91       	pop	r18
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f 90       	pop	r0
     c28:	1f 90       	pop	r1
     c2a:	18 95       	reti

00000c2c <__vector_2>:
ISR(INT1_vect)
{
     c2c:	1f 92       	push	r1
     c2e:	0f 92       	push	r0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	0f 92       	push	r0
     c34:	11 24       	eor	r1, r1
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	4f 93       	push	r20
     c3c:	5f 93       	push	r21
     c3e:	6f 93       	push	r22
     c40:	7f 93       	push	r23
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
     c4a:	ef 93       	push	r30
     c4c:	ff 93       	push	r31
	
	
	if (INT1_Fptr!=NULL_PTR)
     c4e:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <INT1_Fptr>
     c52:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <INT1_Fptr+0x1>
     c56:	30 97       	sbiw	r30, 0x00	; 0
     c58:	09 f0       	breq	.+2      	; 0xc5c <__vector_2+0x30>
	{
		INT1_Fptr();
     c5a:	09 95       	icall
	}
}
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_3>:
ISR(INT2_vect)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	2f 93       	push	r18
     c8a:	3f 93       	push	r19
     c8c:	4f 93       	push	r20
     c8e:	5f 93       	push	r21
     c90:	6f 93       	push	r22
     c92:	7f 93       	push	r23
     c94:	8f 93       	push	r24
     c96:	9f 93       	push	r25
     c98:	af 93       	push	r26
     c9a:	bf 93       	push	r27
     c9c:	ef 93       	push	r30
     c9e:	ff 93       	push	r31
	if (INT2_Fptr!=NULL_PTR)
     ca0:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <INT2_Fptr>
     ca4:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <INT2_Fptr+0x1>
     ca8:	30 97       	sbiw	r30, 0x00	; 0
     caa:	09 f0       	breq	.+2      	; 0xcae <__vector_3+0x30>
	{
		INT2_Fptr();
     cac:	09 95       	icall
	}
	
     cae:	ff 91       	pop	r31
     cb0:	ef 91       	pop	r30
     cb2:	bf 91       	pop	r27
     cb4:	af 91       	pop	r26
     cb6:	9f 91       	pop	r25
     cb8:	8f 91       	pop	r24
     cba:	7f 91       	pop	r23
     cbc:	6f 91       	pop	r22
     cbe:	5f 91       	pop	r21
     cc0:	4f 91       	pop	r20
     cc2:	3f 91       	pop	r19
     cc4:	2f 91       	pop	r18
     cc6:	0f 90       	pop	r0
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	0f 90       	pop	r0
     ccc:	1f 90       	pop	r1
     cce:	18 95       	reti

00000cd0 <__vector_12>:
{
	CLR_BIT(SPCR,SPIE);
}

ISR(SPI_STC_vect)
{
     cd0:	1f 92       	push	r1
     cd2:	0f 92       	push	r0
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	0f 92       	push	r0
     cd8:	11 24       	eor	r1, r1
     cda:	2f 93       	push	r18
     cdc:	3f 93       	push	r19
     cde:	4f 93       	push	r20
     ce0:	5f 93       	push	r21
     ce2:	6f 93       	push	r22
     ce4:	7f 93       	push	r23
     ce6:	8f 93       	push	r24
     ce8:	9f 93       	push	r25
     cea:	af 93       	push	r26
     cec:	bf 93       	push	r27
     cee:	ef 93       	push	r30
     cf0:	ff 93       	push	r31
	if (SPI_Fptr!=NULL_PTR)
     cf2:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <SPI_Fptr>
     cf6:	f0 91 c5 00 	lds	r31, 0x00C5	; 0x8000c5 <SPI_Fptr+0x1>
     cfa:	30 97       	sbiw	r30, 0x00	; 0
     cfc:	09 f0       	breq	.+2      	; 0xd00 <__vector_12+0x30>
	{
		SPI_Fptr();
     cfe:	09 95       	icall
		
	}
     d00:	ff 91       	pop	r31
     d02:	ef 91       	pop	r30
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <__vector_11>:
/*************************************************************************/

/*************************TIMER0 ISR*************************************/

ISR(TIMER0_OVF_vect)
{
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 93       	push	r18
     d2e:	3f 93       	push	r19
     d30:	4f 93       	push	r20
     d32:	5f 93       	push	r21
     d34:	6f 93       	push	r22
     d36:	7f 93       	push	r23
     d38:	8f 93       	push	r24
     d3a:	9f 93       	push	r25
     d3c:	af 93       	push	r26
     d3e:	bf 93       	push	r27
     d40:	ef 93       	push	r30
     d42:	ff 93       	push	r31
	if (Timer0_OVF_Fptr!=NULL_PTR)
     d44:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <Timer0_OVF_Fptr>
     d48:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <Timer0_OVF_Fptr+0x1>
     d4c:	30 97       	sbiw	r30, 0x00	; 0
     d4e:	09 f0       	breq	.+2      	; 0xd52 <__vector_11+0x30>
	{
		Timer0_OVF_Fptr();
     d50:	09 95       	icall
	}
}
     d52:	ff 91       	pop	r31
     d54:	ef 91       	pop	r30
     d56:	bf 91       	pop	r27
     d58:	af 91       	pop	r26
     d5a:	9f 91       	pop	r25
     d5c:	8f 91       	pop	r24
     d5e:	7f 91       	pop	r23
     d60:	6f 91       	pop	r22
     d62:	5f 91       	pop	r21
     d64:	4f 91       	pop	r20
     d66:	3f 91       	pop	r19
     d68:	2f 91       	pop	r18
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <__vector_10>:

ISR(TIMER0_OC_vect)
{
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	2f 93       	push	r18
     d80:	3f 93       	push	r19
     d82:	4f 93       	push	r20
     d84:	5f 93       	push	r21
     d86:	6f 93       	push	r22
     d88:	7f 93       	push	r23
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
	if (Timer0_OC_Fptr!=NULL_PTR)
     d96:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <Timer0_OC_Fptr>
     d9a:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <Timer0_OC_Fptr+0x1>
     d9e:	30 97       	sbiw	r30, 0x00	; 0
     da0:	09 f0       	breq	.+2      	; 0xda4 <__vector_10+0x30>
	{
		Timer0_OC_Fptr();
     da2:	09 95       	icall
	}
}
     da4:	ff 91       	pop	r31
     da6:	ef 91       	pop	r30
     da8:	bf 91       	pop	r27
     daa:	af 91       	pop	r26
     dac:	9f 91       	pop	r25
     dae:	8f 91       	pop	r24
     db0:	7f 91       	pop	r23
     db2:	6f 91       	pop	r22
     db4:	5f 91       	pop	r21
     db6:	4f 91       	pop	r20
     db8:	3f 91       	pop	r19
     dba:	2f 91       	pop	r18
     dbc:	0f 90       	pop	r0
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	0f 90       	pop	r0
     dc2:	1f 90       	pop	r1
     dc4:	18 95       	reti

00000dc6 <__vector_9>:
/*********************isrs ********************/



ISR(TIMER1_OVF_vect)
{
     dc6:	1f 92       	push	r1
     dc8:	0f 92       	push	r0
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	0f 92       	push	r0
     dce:	11 24       	eor	r1, r1
     dd0:	2f 93       	push	r18
     dd2:	3f 93       	push	r19
     dd4:	4f 93       	push	r20
     dd6:	5f 93       	push	r21
     dd8:	6f 93       	push	r22
     dda:	7f 93       	push	r23
     ddc:	8f 93       	push	r24
     dde:	9f 93       	push	r25
     de0:	af 93       	push	r26
     de2:	bf 93       	push	r27
     de4:	ef 93       	push	r30
     de6:	ff 93       	push	r31
	if(Timer1_OVF_Fptr!=NULL_PTR)
     de8:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <Timer1_OVF_Fptr>
     dec:	f0 91 d1 00 	lds	r31, 0x00D1	; 0x8000d1 <Timer1_OVF_Fptr+0x1>
     df0:	30 97       	sbiw	r30, 0x00	; 0
     df2:	09 f0       	breq	.+2      	; 0xdf6 <__vector_9+0x30>
	{
		Timer1_OVF_Fptr();
     df4:	09 95       	icall
	}
}
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <__vector_7>:
ISR(TIMER1_OCA_vect)
{
     e18:	1f 92       	push	r1
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	0f 92       	push	r0
     e20:	11 24       	eor	r1, r1
     e22:	2f 93       	push	r18
     e24:	3f 93       	push	r19
     e26:	4f 93       	push	r20
     e28:	5f 93       	push	r21
     e2a:	6f 93       	push	r22
     e2c:	7f 93       	push	r23
     e2e:	8f 93       	push	r24
     e30:	9f 93       	push	r25
     e32:	af 93       	push	r26
     e34:	bf 93       	push	r27
     e36:	ef 93       	push	r30
     e38:	ff 93       	push	r31
	if(Timer1_OCA_Fptr!=NULL_PTR)
     e3a:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <Timer1_OCA_Fptr>
     e3e:	f0 91 cf 00 	lds	r31, 0x00CF	; 0x8000cf <Timer1_OCA_Fptr+0x1>
     e42:	30 97       	sbiw	r30, 0x00	; 0
     e44:	09 f0       	breq	.+2      	; 0xe48 <__vector_7+0x30>
	{
		Timer1_OCA_Fptr();
     e46:	09 95       	icall
	}

	
}
     e48:	ff 91       	pop	r31
     e4a:	ef 91       	pop	r30
     e4c:	bf 91       	pop	r27
     e4e:	af 91       	pop	r26
     e50:	9f 91       	pop	r25
     e52:	8f 91       	pop	r24
     e54:	7f 91       	pop	r23
     e56:	6f 91       	pop	r22
     e58:	5f 91       	pop	r21
     e5a:	4f 91       	pop	r20
     e5c:	3f 91       	pop	r19
     e5e:	2f 91       	pop	r18
     e60:	0f 90       	pop	r0
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	0f 90       	pop	r0
     e66:	1f 90       	pop	r1
     e68:	18 95       	reti

00000e6a <__vector_8>:
ISR(TIMER1_OCB_vect)
{
     e6a:	1f 92       	push	r1
     e6c:	0f 92       	push	r0
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	0f 92       	push	r0
     e72:	11 24       	eor	r1, r1
     e74:	2f 93       	push	r18
     e76:	3f 93       	push	r19
     e78:	4f 93       	push	r20
     e7a:	5f 93       	push	r21
     e7c:	6f 93       	push	r22
     e7e:	7f 93       	push	r23
     e80:	8f 93       	push	r24
     e82:	9f 93       	push	r25
     e84:	af 93       	push	r26
     e86:	bf 93       	push	r27
     e88:	ef 93       	push	r30
     e8a:	ff 93       	push	r31
	if(Timer1_OCB_Fptr!=NULL_PTR)
     e8c:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <Timer1_OCB_Fptr>
     e90:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <Timer1_OCB_Fptr+0x1>
     e94:	30 97       	sbiw	r30, 0x00	; 0
     e96:	09 f0       	breq	.+2      	; 0xe9a <__vector_8+0x30>
	{
		Timer1_OCB_Fptr();
     e98:	09 95       	icall
	}
}
     e9a:	ff 91       	pop	r31
     e9c:	ef 91       	pop	r30
     e9e:	bf 91       	pop	r27
     ea0:	af 91       	pop	r26
     ea2:	9f 91       	pop	r25
     ea4:	8f 91       	pop	r24
     ea6:	7f 91       	pop	r23
     ea8:	6f 91       	pop	r22
     eaa:	5f 91       	pop	r21
     eac:	4f 91       	pop	r20
     eae:	3f 91       	pop	r19
     eb0:	2f 91       	pop	r18
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	0f 90       	pop	r0
     eb8:	1f 90       	pop	r1
     eba:	18 95       	reti

00000ebc <__vector_6>:
ISR(TIMER1_ICU_vect)
{
     ebc:	1f 92       	push	r1
     ebe:	0f 92       	push	r0
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	0f 92       	push	r0
     ec4:	11 24       	eor	r1, r1
     ec6:	2f 93       	push	r18
     ec8:	3f 93       	push	r19
     eca:	4f 93       	push	r20
     ecc:	5f 93       	push	r21
     ece:	6f 93       	push	r22
     ed0:	7f 93       	push	r23
     ed2:	8f 93       	push	r24
     ed4:	9f 93       	push	r25
     ed6:	af 93       	push	r26
     ed8:	bf 93       	push	r27
     eda:	ef 93       	push	r30
     edc:	ff 93       	push	r31
	if(Timer1_ICU_Fptr!=NULL_PTR)
     ede:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <Timer1_ICU_Fptr>
     ee2:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <Timer1_ICU_Fptr+0x1>
     ee6:	30 97       	sbiw	r30, 0x00	; 0
     ee8:	09 f0       	breq	.+2      	; 0xeec <__vector_6+0x30>
	{
		Timer1_ICU_Fptr();
     eea:	09 95       	icall
	}
     eec:	ff 91       	pop	r31
     eee:	ef 91       	pop	r30
     ef0:	bf 91       	pop	r27
     ef2:	af 91       	pop	r26
     ef4:	9f 91       	pop	r25
     ef6:	8f 91       	pop	r24
     ef8:	7f 91       	pop	r23
     efa:	6f 91       	pop	r22
     efc:	5f 91       	pop	r21
     efe:	4f 91       	pop	r20
     f00:	3f 91       	pop	r19
     f02:	2f 91       	pop	r18
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	0f 90       	pop	r0
     f0a:	1f 90       	pop	r1
     f0c:	18 95       	reti

00000f0e <__vector_13>:
	UART_TX_Fptr = LocalFptr;
}


ISR(UART_RX_vect)
{
     f0e:	1f 92       	push	r1
     f10:	0f 92       	push	r0
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	0f 92       	push	r0
     f16:	11 24       	eor	r1, r1
     f18:	2f 93       	push	r18
     f1a:	3f 93       	push	r19
     f1c:	4f 93       	push	r20
     f1e:	5f 93       	push	r21
     f20:	6f 93       	push	r22
     f22:	7f 93       	push	r23
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	af 93       	push	r26
     f2a:	bf 93       	push	r27
     f2c:	ef 93       	push	r30
     f2e:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULL_PTR)
     f30:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <UART_RX_Fptr>
     f34:	f0 91 d5 00 	lds	r31, 0x00D5	; 0x8000d5 <UART_RX_Fptr+0x1>
     f38:	30 97       	sbiw	r30, 0x00	; 0
     f3a:	09 f0       	breq	.+2      	; 0xf3e <__vector_13+0x30>
	{
		UART_RX_Fptr();
     f3c:	09 95       	icall
	}
}
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <__vector_15>:

ISR(UART_TX_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULL_PTR)
     f82:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <UART_TX_Fptr>
     f86:	f0 91 d3 00 	lds	r31, 0x00D3	; 0x8000d3 <UART_TX_Fptr+0x1>
     f8a:	30 97       	sbiw	r30, 0x00	; 0
     f8c:	09 f0       	breq	.+2      	; 0xf90 <__vector_15+0x30>
	{
		UART_TX_Fptr();
     f8e:	09 95       	icall
	}
     f90:	ff 91       	pop	r31
     f92:	ef 91       	pop	r30
     f94:	bf 91       	pop	r27
     f96:	af 91       	pop	r26
     f98:	9f 91       	pop	r25
     f9a:	8f 91       	pop	r24
     f9c:	7f 91       	pop	r23
     f9e:	6f 91       	pop	r22
     fa0:	5f 91       	pop	r21
     fa2:	4f 91       	pop	r20
     fa4:	3f 91       	pop	r19
     fa6:	2f 91       	pop	r18
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	0f 90       	pop	r0
     fae:	1f 90       	pop	r1
     fb0:	18 95       	reti

00000fb2 <__udivmodsi4>:
     fb2:	a1 e2       	ldi	r26, 0x21	; 33
     fb4:	1a 2e       	mov	r1, r26
     fb6:	aa 1b       	sub	r26, r26
     fb8:	bb 1b       	sub	r27, r27
     fba:	fd 01       	movw	r30, r26
     fbc:	0d c0       	rjmp	.+26     	; 0xfd8 <__udivmodsi4_ep>

00000fbe <__udivmodsi4_loop>:
     fbe:	aa 1f       	adc	r26, r26
     fc0:	bb 1f       	adc	r27, r27
     fc2:	ee 1f       	adc	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	a2 17       	cp	r26, r18
     fc8:	b3 07       	cpc	r27, r19
     fca:	e4 07       	cpc	r30, r20
     fcc:	f5 07       	cpc	r31, r21
     fce:	20 f0       	brcs	.+8      	; 0xfd8 <__udivmodsi4_ep>
     fd0:	a2 1b       	sub	r26, r18
     fd2:	b3 0b       	sbc	r27, r19
     fd4:	e4 0b       	sbc	r30, r20
     fd6:	f5 0b       	sbc	r31, r21

00000fd8 <__udivmodsi4_ep>:
     fd8:	66 1f       	adc	r22, r22
     fda:	77 1f       	adc	r23, r23
     fdc:	88 1f       	adc	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	1a 94       	dec	r1
     fe2:	69 f7       	brne	.-38     	; 0xfbe <__udivmodsi4_loop>
     fe4:	60 95       	com	r22
     fe6:	70 95       	com	r23
     fe8:	80 95       	com	r24
     fea:	90 95       	com	r25
     fec:	9b 01       	movw	r18, r22
     fee:	ac 01       	movw	r20, r24
     ff0:	bd 01       	movw	r22, r26
     ff2:	cf 01       	movw	r24, r30
     ff4:	08 95       	ret

00000ff6 <__divmodsi4>:
     ff6:	05 2e       	mov	r0, r21
     ff8:	97 fb       	bst	r25, 7
     ffa:	1e f4       	brtc	.+6      	; 0x1002 <__divmodsi4+0xc>
     ffc:	00 94       	com	r0
     ffe:	0e 94 12 08 	call	0x1024	; 0x1024 <__negsi2>
    1002:	57 fd       	sbrc	r21, 7
    1004:	07 d0       	rcall	.+14     	; 0x1014 <__divmodsi4_neg2>
    1006:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__udivmodsi4>
    100a:	07 fc       	sbrc	r0, 7
    100c:	03 d0       	rcall	.+6      	; 0x1014 <__divmodsi4_neg2>
    100e:	4e f4       	brtc	.+18     	; 0x1022 <__divmodsi4_exit>
    1010:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__negsi2>

00001014 <__divmodsi4_neg2>:
    1014:	50 95       	com	r21
    1016:	40 95       	com	r20
    1018:	30 95       	com	r19
    101a:	21 95       	neg	r18
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	4f 4f       	sbci	r20, 0xFF	; 255
    1020:	5f 4f       	sbci	r21, 0xFF	; 255

00001022 <__divmodsi4_exit>:
    1022:	08 95       	ret

00001024 <__negsi2>:
    1024:	90 95       	com	r25
    1026:	80 95       	com	r24
    1028:	70 95       	com	r23
    102a:	61 95       	neg	r22
    102c:	7f 4f       	sbci	r23, 0xFF	; 255
    102e:	8f 4f       	sbci	r24, 0xFF	; 255
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	08 95       	ret

00001034 <__umulhisi3>:
    1034:	a2 9f       	mul	r26, r18
    1036:	b0 01       	movw	r22, r0
    1038:	b3 9f       	mul	r27, r19
    103a:	c0 01       	movw	r24, r0
    103c:	a3 9f       	mul	r26, r19
    103e:	70 0d       	add	r23, r0
    1040:	81 1d       	adc	r24, r1
    1042:	11 24       	eor	r1, r1
    1044:	91 1d       	adc	r25, r1
    1046:	b2 9f       	mul	r27, r18
    1048:	70 0d       	add	r23, r0
    104a:	81 1d       	adc	r24, r1
    104c:	11 24       	eor	r1, r1
    104e:	91 1d       	adc	r25, r1
    1050:	08 95       	ret

00001052 <_exit>:
    1052:	f8 94       	cli

00001054 <__stop_program>:
    1054:	ff cf       	rjmp	.-2      	; 0x1054 <__stop_program>
